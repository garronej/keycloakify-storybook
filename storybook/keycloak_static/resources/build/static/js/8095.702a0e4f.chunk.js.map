{"version":3,"file":"static/js/8095.702a0e4f.chunk.js","mappings":"0RAUe,SAASA,EAASC,GAA0E,IAAD,QAC9FC,EAA+ED,EAA/EC,UAAWC,EAAoEF,EAApEE,KAAnB,EAAuFF,EAA9DG,6BAAAA,OAAzB,SAA8DC,EAAyBJ,EAAzBI,SAAaC,GAA3E,OAAuFL,EAAvF,GAEQM,EAAkGL,EAAlGK,IAAKC,EAA6FN,EAA7FM,iBAAkBC,EAA2EP,EAA3EO,SAAUC,EAAiER,EAAjEQ,MAAOC,EAA0DT,EAA1DS,iBAAkBC,EAAwCV,EAAxCU,kBAAmBC,EAAqBX,EAArBW,iBAE7EC,EAAgBX,EAAhBW,IAAKC,EAAWZ,EAAXY,OAIb,OAFAC,QAAQC,IAAR,gEAAqEf,EAAUgB,yBAG3E,SAACb,GAAD,2BACUH,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCE,IAD5D,IAEIa,WAAYL,EAAI,iBAChBM,UACI,kBAAMC,GAAG,mBAAmBC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQkB,aAAcC,OAAQlB,EAAImB,mBAAoBC,OAAO,OAAzG,WACI,iBAAKL,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQsB,iBAAkBpB,EAAiBqB,cAAc,YAAavB,EAAQwB,wBAAnG,WACI,gBAAKR,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyB,qBAA7B,UACI,kBAAOC,QAAQ,YAAYV,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ2B,cAAnD,SACKnB,EAAI,kBAGb,gBAAKQ,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,kBACIC,KAAK,OACLd,GAAG,YACHC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ8B,cACxBC,KAAK,YACLC,aAAY,UAAE7B,EAAS8B,SAASC,iBAApB,QAAiC,WAKzD,iBAAKlB,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQsB,iBAAkBpB,EAAiBqB,cAAc,WAAYvB,EAAQwB,wBAAlG,WACI,gBAAKR,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyB,qBAA7B,UACI,kBAAOC,QAAQ,WAAWV,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ2B,cAAlD,SACKnB,EAAI,iBAGb,gBAAKQ,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,kBACIC,KAAK,OACLd,GAAG,WACHC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ8B,cACxBC,KAAK,WACLC,aAAY,UAAE7B,EAAS8B,SAASE,gBAApB,QAAgC,WAMxD,iBAAKnB,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQsB,iBAAkBpB,EAAiBqB,cAAc,QAASvB,EAAQwB,wBAA/F,WACI,gBAAKR,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyB,qBAA7B,UACI,kBAAOC,QAAQ,QAAQV,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ2B,cAA/C,SACKnB,EAAI,cAGb,gBAAKQ,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,kBACIC,KAAK,OACLd,GAAG,QACHC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ8B,cACxBC,KAAK,QACLC,aAAY,UAAE7B,EAAS8B,SAASG,aAApB,QAA6B,GACzCC,aAAa,gBAIvBjC,EAAMkC,8BACJ,iBAAKtB,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQsB,iBAAkBpB,EAAiBqB,cAAc,WAAYvB,EAAQwB,wBAAlG,WACI,gBAAKR,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyB,qBAA7B,UACI,kBAAOC,QAAQ,WAAWV,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ2B,cAAlD,SACKnB,EAAI,iBAGb,gBAAKQ,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,kBACIC,KAAK,OACLd,GAAG,WACHC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ8B,cACxBC,KAAK,WACLC,aAAY,UAAE7B,EAAS8B,SAASM,gBAApB,QAAgC,GAC5CF,aAAa,kBAK5BhC,IACG,iCACI,iBACIW,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQsB,iBAAkBpB,EAAiBqB,cAAc,WAAYvB,EAAQwB,wBADjG,WAGI,gBAAKR,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyB,qBAA7B,UACI,kBAAOC,QAAQ,WAAWV,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ2B,cAAlD,SACKnB,EAAI,iBAGb,gBAAKQ,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,kBACIC,KAAK,WACLd,GAAG,WACHC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ8B,cACxBC,KAAK,WACLM,aAAa,uBAKzB,iBACIrB,WAAWC,EAAAA,EAAAA,GACPjB,EAAQsB,iBACRpB,EAAiBqB,cAAc,mBAAoBvB,EAAQwB,wBAHnE,WAMI,gBAAKR,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyB,qBAA7B,UACI,kBAAOC,QAAQ,mBAAmBV,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ2B,cAA1D,SACKnB,EAAI,wBAGb,gBAAKQ,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,kBAAOC,KAAK,WAAWd,GAAG,mBAAmBC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ8B,cAAeC,KAAK,6BAKxGzB,IACG,gBAAKU,UAAU,aAAf,UACI,gBAAKA,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4B,qBAA7B,UACI,gBAAKZ,UAAU,cAAc,YAAU,UAAU,eAAcT,SAI3E,iBAAKS,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQsB,kBAA7B,WACI,gBAAKP,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQwC,oBAAlD,UACI,gBAAKxB,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQyC,2BAA7B,UACI,2BACI,cAAGC,KAAMzC,EAAI0C,SAAb,SAAwBnC,EAAI,wBAKxC,gBAAKO,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKjB,EAAQ4C,oBAAlD,UACI,kBACI5B,WAAWC,EAAAA,EAAAA,GACPjB,EAAQ6C,cACR7C,EAAQ8C,qBACR9C,EAAQ+C,mBACR/C,EAAQgD,oBAEZnB,KAAK,SACLoB,MAAOxC,EAAO,0BAQ7C,C,uBCtKc,SAASyC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IAEIE,EAAKC,EAFLC,EAAS,CAAC,EACVC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,CACT,CDVe,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,GAEzB,CAEA,OAAOE,CACT,C","sources":["keycloak-theme/pages/Register.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["// This is a copy paste from https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/pages/Register.tsx\n// It is now up to us to implement a special behavior to leverage the non standard authorizedMailDomains\n// provided by the plugin: https://github.com/micedre/keycloak-mail-whitelisting installed on our keycloak server.\n// Note that it is no longer recommended to use register.ftl, it's best to use register-user-profile.ftl\n// See: https://docs.keycloakify.dev/realtime-input-validation\nimport { clsx } from \"keycloakify/lib/tools/clsx\";\nimport type { PageProps } from \"keycloakify/lib/KcProps\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Register(props: PageProps<Extract<KcContext, { pageId: \"register.ftl\"; }>, I18n>) {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template, ...kcProps } = props;\n\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    console.log(`NOTE: It is up to you do do something meaningful with ${kcContext.authorizedMailDomains}`);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={clsx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n\n                        </div>\n                    </div>\n\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"email\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"username\", kcProps.kcFormGroupErrorClass))}>\n                            <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={clsx(kcProps.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={clsx(kcProps.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div\n                                className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"password\", kcProps.kcFormGroupErrorClass))}\n                            >\n                                <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={clsx(kcProps.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={clsx(\n                                    kcProps.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", kcProps.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={clsx(kcProps.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n}\n\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["Register","props","kcContext","i18n","doFetchDefaultThemeResources","Template","kcProps","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","console","log","authorizedMailDomains","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}