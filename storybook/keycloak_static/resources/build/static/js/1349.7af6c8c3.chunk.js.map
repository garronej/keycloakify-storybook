{"version":3,"file":"static/js/1349.7af6c8c3.chunk.js","mappings":"sOAAaA,EACT,yJ,uVC0BE,SAAUC,EAAsBC,G,IAClCC,EAIUD,EAJVC,UACAC,EAGUF,EAHVE,+BACAC,EAEUH,EAFVG,KACAC,EACUJ,EADVI,YACAC,EAAUL,EAAVK,WACGC,EAAKC,EAAAA,EAN0B,kFAQ1BC,EAAgBL,EAAhBK,YAER,EAyJE,SAA4BC,GAa9B,IACIR,EAQAQ,EARAR,UADJ,EASIQ,EAPAC,mBAAAA,OAFJ,MAEyB,CACjB,OAAU,CACN,sBAAsB,EACtB,IAAO,MALnB,EAQIP,EACAM,EADAN,KAGEQ,GAAyBC,EAAAA,EAAAA,UAC3B,kBACKX,EAAUY,iBAEJ,WACG,IAAMC,EAAOb,EAAUc,MAAMC,4BAA8B,QAAU,WAErE,OAAOf,EAAUgB,QAAQC,WAAWC,QAChC,SAACC,EAAMC,GAAP,wBACOD,IADP,OAEQC,EAAKP,OAASA,EACZ,CAACO,GACD,CACIA,GACAC,EAAAA,EAAAA,IAAc,CACV,KAAQ,WACR,aAAeA,EAAAA,EAAAA,IAA4B,eAC3C,UAAY,EACZ,UAAY,EACZ,WAAcZ,EACd,YAAe,CAAC,EAChB,iBAAoB,CAAC,EACrB,aAAgB,kBAEpBY,EAAAA,EAAAA,IAAc,CACV,KAAQ,mBACR,aAAeA,EAAAA,EAAAA,IAA4B,sBAC3C,UAAY,EACZ,UAAY,EACZ,WAAc,CACV,gBAAmB,CACf,KAAQ,WACR,sBAAsB,EACtB,SAAY,QACZ,iBAAiBA,EAAAA,EAAAA,IAA4B,sCAGrD,YAAe,CAAC,EAChB,iBAAoB,CAAC,EACrB,aAAgB,mBA/BlC,GAmCA,GAEP,CAzCA,GADDrB,EAAUgB,QAAQC,UAF5B,GA6CA,CAACjB,EAAWS,IAGRa,EAoGZ,SAAsBd,GASlB,IAAQR,EAAoBQ,EAApBR,UAAWE,EAASM,EAATN,KAGfqB,EAEAvB,EAFAuB,iBACWN,EACXjB,EADAgB,QAAWC,WAGPO,EAA6CtB,EAA7CsB,IAAKC,EAAwCvB,EAAxCuB,OAAQlB,EAAgCL,EAAhCK,YAAamB,EAAmBxB,EAAnBwB,eAE5BJ,GAAYK,EAAAA,EAAAA,IAAiB,SAACnB,G,MACxBK,EAAoCL,EAApCK,KAAMe,EAA8BpB,EAA9BoB,0BAENC,EAAUD,EAA0Bf,GAApCgB,MAER,EAA4CZ,EAAWa,MAAK,SAAAC,GAAS,OAAIA,EAAUlB,OAASA,CAAvB,IAAtDmB,EAAf,EAAQH,MAAqBI,EAA7B,EAA6BA,WAE7BC,EACI,GAAIF,IAAiBH,EAArB,CAIA,IAAIM,EAEJ,IACIA,EAAiBZ,EAAiBa,YAAYvB,EAGjD,CAFC,UACE,MAAMqB,CACT,CAED,GAAKC,EAAL,CAIA,IAAME,EAAkBd,EAAiBe,IAAIzB,GAE7C,MAAO,CACH,CACI,mBAAiB0B,EACjBF,gBAAAA,EACA,aAAgBG,EAAAA,cAAAA,OAAAA,CAAMC,IAAK,GAAIJ,IARtC,CAZA,CAyBL,IAAMK,EAIA,GAGIC,EAAgB,SAEhBC,EAAYX,EAAWU,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,MAAqEA,EAA7D,sBAAsBC,OAA9B,SAAwDC,EAAaF,EAAbE,IAAKC,EAAQH,EAARG,IAE7D,IAAIF,GAA8B,KAAVhB,EAAxB,CAIA,QAAYU,IAARO,GAAqBjB,EAAMmB,OAASC,SAASH,GAAM,CACnD,IAAMI,EAAU,CAAC,gCAAiCJ,GAElDJ,EAAOS,KAAK,CACR,aAAgBX,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASxB,EAAG,WAAH,EAAO0B,IACtD,gBAAmBzB,EAAM,WAAN,EAAUyB,GAC7BP,cAAAA,GAEP,CAED,QAAYJ,IAARQ,GAAqBlB,EAAMmB,OAASC,SAASF,GAAM,CACnD,IAAMG,EAAU,CAAC,iCAAkCH,GAEnDL,EAAOS,KAAK,CACR,aAAgBX,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASxB,EAAG,WAAH,EAAO0B,IACtD,gBAAmBzB,EAAM,WAAN,EAAUyB,GAC7BP,cAAAA,GAEP,CApBA,CANA,CA8BD,IAAMA,EAAgB,kBAEhBC,EAAYX,EAAWU,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,MAAwHA,EAAhH,sBAAsBC,OAA9B,SAA8DQ,EAA0DT,EAAhE/B,KAAiByC,EAA+CV,EAA/CU,SAA2BC,EAAoBX,EAArC,iBAEnF,IAAIC,GAA8B,KAAVhB,EAAxB,CAIA,IAAe2B,EAAe5B,EAA0ByB,GAAhDxB,MAWR,IATiB,WACb,OAAQyB,GACJ,IAAK,YACD,OAAOE,IAAe3B,EAC1B,IAAK,QACD,OAAO2B,IAAe3B,EAEjC,CAPgB,GASjB,CAIA,IAAM4B,EAAS,CACI,OAAfF,QAAe,IAAfA,EAAAA,GACIlC,EAAAA,EAAAA,IACK,WACG,OAAQiC,GACJ,IAAK,QACD,MAAO,gBACX,IAAK,YACD,MAAO,oBAElB,CAPA,IASTD,EACAxC,EACAyC,GAGJZ,EAAOS,KAAK,CACRR,cAAAA,EACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASzC,EAAW,WAAX,EAAekD,IAC9D,gBAAmB/B,EAAc,WAAd,EAAkB+B,IAtBxC,CAfA,CANA,CAgDD,IAAMd,EAAgB,UAEhBC,EAAYX,EAAWU,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,MAAsGA,EAA9F,sBAAsBC,OAA9B,SAAwDa,EAA8Cd,EAA9Cc,QAA0BH,EAAoBX,EAArC,iBAEjE,KAAIC,GAA8B,KAAVhB,KAIpB,IAAI8B,OAAOD,GAASE,KAAK/B,GAA7B,CAIA,IAAMqB,EAAU,CAAgB,OAAfK,QAAe,IAAf,KAAmBlC,EAAAA,EAAAA,IAAmB,sBAAuBqC,GAE9EhB,EAAOS,KAAK,CACRR,cAAAA,EACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASzC,EAAW,WAAX,EAAe2C,IAC9D,gBAAmBxB,EAAc,WAAd,EAAkBwB,IAPxC,CAVA,CAsBD,GAAgD,aAApB,QAAxB,YAAIR,GAAQmB,UAAU,UAAE9D,IAAAA,OAAA,EAAAA,EAAE4C,eAA9B,CAIA,IAAMA,EAAgB,QAEhBC,EAAYX,EAAWU,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,MAA2DA,EAAnD,sBAER,WAFA,WAEkC,KAAVf,KAIpBhC,EAAY+D,KAAK/B,GAArB,CAIA,IAAMqB,EAAU,EAAC7B,EAAAA,EAAAA,IAAmB,wBAEpCqB,EAAOS,KAAK,CACRR,cAAAA,EACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASxB,EAAG,WAAH,EAAO0B,IACtD,gBAAmBzB,EAAM,WAAN,EAAUyB,IAPhC,CAVA,CARA,CA8BD,IAAMP,EAAgB,UAEhBC,EAAYX,EAAWU,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,MAAqEA,EAA7D,sBAAsBC,OAA9B,SAAwDC,EAAaF,EAAbE,IAAKC,EAAQH,EAARG,IAE7D,IAAIF,GAA8B,KAAVhB,EAAxB,CAIA,IAAMiC,GAAWb,SAASpB,GAE1B,GAAIkC,MAAMD,IAAV,CACI,IAAMZ,GAAU,CAAC,mBAEjBR,EAAOS,KAAK,CACRR,cAAAA,EACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASxB,EAAG,WAAH,EAAO0B,KACtD,gBAAmBzB,EAAM,WAAN,EAAUyB,KAIpC,MAED,QAAYX,IAARO,GAAqBgB,GAAWb,SAASH,GAA7C,CACI,IAAMI,GAAU,CAAC,oCAAqCJ,GAEtDJ,EAAOS,KAAK,CACRR,cAAAA,EACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASxB,EAAG,WAAH,EAAO0B,KACtD,gBAAmBzB,EAAM,WAAN,EAAUyB,KAIpC,MAED,QAAYX,IAARQ,GAAqBe,GAAWb,SAASF,GAA7C,CACI,IAAMG,GAAU,CAAC,sCAAuCH,GAExDL,EAAOS,KAAK,CACRR,cAAAA,EACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASxB,EAAG,WAAH,EAAO0B,KACtD,gBAAmBzB,EAAM,WAAN,EAAUyB,KAIpC,MAtCA,CANA,CAgDD,IAAMP,GAAgB,UAEhBC,GAAYX,EAAWU,IAE7B,QAAkBJ,IAAdK,IAIU,KAAVf,KAIAe,GAAUoB,QAAQC,QAAQpC,IAAU,GAAxC,CAIA,IAAMqB,GAAU,EAAC7B,EAAAA,EAAAA,IAAmB,oBAEpCqB,EAAOS,KAAK,CACRR,cAAAA,GACA,aAAgBH,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAKC,EAAOM,QAASzC,EAAW,WAAX,EAAe2C,KAC9D,gBAAmBxB,EAAc,WAAd,EAAkBwB,KAPxC,CAaL,OAAOR,CACV,IAED,MAAO,CAAEpB,UAAAA,EACZ,CA3YyB4C,CAAa,CAC/B,UAAa,CACT,iBAAoBlE,EAAUuB,iBAC9B,QAAW,CACP,WAAcb,IAGtBR,KAAAA,IAPIoB,UAUF6C,GAAuBxD,EAAAA,EAAAA,UACzB,kBACIyD,OAAOC,YACH3D,EACK4D,KAAI,SAAAvC,GAAS,MAAK,CACfA,UAAAA,EACA,OAAUT,EAAU,CAChB,KAAQS,EAAUlB,KAClB,0BAA6BuD,OAAOC,YAChC3D,EAAuB4D,KAAI,gBAAGzD,EAAH,EAAGA,KAAMgB,EAAT,EAASA,MAAT,MAAqB,CAAChB,EAAM,CAAE,MAAc,OAALgB,QAAK,IAALA,EAAAA,EAAS,IAAhD,OALzB,IASbyC,KAAI,YAA0B,I,EAAvBvC,EAAuB,EAAvBA,UAAWW,EAAY,EAAZA,OAAa,OAC5BX,EAAUlB,KACV,CACI,MAAwB,QAAf,EAAAkB,EAAUF,aAAK9B,IAAAA,EAAAA,EAAI,GAC5B2C,OAAAA,EACA,gCAAqD,IAAlBA,EAAOM,QAEjD,IAnBb,GAqBA,CAACtC,IAKL,GAA8D6D,EAAAA,EAAAA,aAC1D,SACIC,EACAhE,GAFJ,OAYoB4D,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,EACbI,IADa,UAEfhE,EAAOK,KAAKuD,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,EACNI,EAAMhE,EAAOK,OACZ,WACA,OAAQL,EAAOiE,QACX,IAAK,aACD,MAAO,CAAE,iCAAmC,GAChD,IAAK,eACD,MAAO,CACH,MAASjE,EAAOkE,SAChB,OAAUpD,EAAU,CAChB,KAAQd,EAAOK,KACf,0BAA2BuD,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,EACpBI,IADoB,UAEtBhE,EAAOK,KAAO,CAAE,MAASL,EAAOkE,eAKxD,CAhBG,KAhBZ,GAmCAP,GApCJ,eAAOQ,EAAP,KAAoCC,EAApC,KAuDA,MAAO,CACHC,qBAjBwBlE,EAAAA,EAAAA,UACxB,iBAAO,CACH,0BAA6ByD,OAAOC,YAChCD,OAAOU,QAAQH,GAA6BL,KAAI,+BAAEzD,EAAF,YAAUgB,EAAV,EAAUA,MAAOa,EAAjB,EAAiBA,OAAjB,MAAgE,CAC5G7B,EACA,CAAEgB,MAAAA,EAAO,kBAFmC,EAAyBkD,gCAELrC,EAAS,IAF7B,KAKpD,kBAAqB0B,OAAOU,QAAQH,GAA6BK,OAC7D,+BAAEnE,EAAF,YAAUgB,EAAV,EAAUA,MAAV,OACsB,IADtB,EAAiBa,OACNM,SAA2B,KAAVnB,IAAiBnB,EAAuBoB,MAAK,SAAAC,GAAS,OAAIA,EAAUlB,OAASA,CAAvB,IAA8BoE,SADhH,IARR,GAYA,CAACN,EAA6BjE,IAK9BkE,uBAAAA,EACAlE,uBAAAA,EAEP,CA/TOwE,CAAkB,CAClBlF,UAAAA,EACAE,KAAAA,IANJ,IACI2E,oBAAuBM,EAD3B,EAC2BA,0BAA2BC,EADtD,EACsDA,kBAClDR,EAFJ,EAEIA,uBACAlE,EAHJ,EAGIA,wBAMJ2E,EAAAA,EAAAA,YAAU,WACNpF,EAA+BmF,EAClC,GAAE,CAACA,IAEJ,IAAIE,EAAe,GAEnB,OACI9C,EAAAA,cAAAA,EAAAA,SAAAA,KACK9B,EAAuB4D,KAAI,SAACvC,EAAWwD,G,MACpC,EAA8ExD,EAAtEyD,MAAAA,OAAR,MAAgB,GAAhB,IAA8EzD,EAA1D0D,mBAAAA,OAApB,MAAyC,GAAzC,IAA8E1D,EAAjC2D,wBAAAA,OAA7C,MAAuE,GAAvE,EAEA,EAAqCP,EAA0BpD,EAAUlB,MAAjEgB,EAAR,EAAQA,MAAO8D,EAAf,EAAeA,kBAETC,GAAqBC,EAAAA,EAAAA,GAAKxF,EAAMyF,iBAA+C,IAA7BH,EAAkB3C,QAAgB3C,EAAM0F,uBAEhG,OACIvD,EAAAA,cAACY,EAAAA,SAAQ,CAACX,IAAK8C,GACVC,IAAUF,GAA2C,MAA1BA,EAAeE,IACvChD,EAAAA,cAAAA,MAAAA,CAAKwD,UAAWJ,GACZpD,EAAAA,cAAAA,MAAAA,CAAKwD,WAAWH,EAAAA,EAAAA,GAAKxF,EAAM4F,wBACvBzD,EAAAA,cAAAA,QAAAA,CAAOnB,GAAE,iBAAYmE,GAASQ,WAAWH,EAAAA,EAAAA,GAAKxF,EAAM6F,oBAC/C3F,EAAYkF,IAAuBH,IAGf,KAA5BI,GACGlD,EAAAA,cAAAA,MAAAA,CAAKwD,WAAWH,EAAAA,EAAAA,GAAKxF,EAAM8F,sBACvB3D,EAAAA,cAAAA,QAAAA,CAAOnB,GAAE,sBAAiBmE,GAASQ,UAAS,WAAKH,EAAAA,EAAAA,GAAKxF,EAAM+F,gBACvD7F,EAAYmF,MAOhCvF,GAAeqC,EAAAA,cAACrC,EAAW,CAAC4B,UAAWA,IAExCS,EAAAA,cAAAA,MAAAA,CAAKwD,UAAWJ,GACZpD,EAAAA,cAAAA,MAAAA,CAAKwD,WAAWH,EAAAA,EAAAA,GAAKxF,EAAM8F,sBACvB3D,EAAAA,cAAAA,QAAAA,CAAO6D,QAAStE,EAAUlB,KAAMmF,WAAWH,EAAAA,EAAAA,GAAKxF,EAAM+F,eACjD7F,EAAiC,QAArB,EAAAwB,EAAUuE,mBAAWvG,IAAAA,EAAAA,EAAI,KAEzCgC,EAAUkD,UAAYzC,EAAAA,cAAAA,EAAAA,SAAAA,KAAAA,MAE3BA,EAAAA,cAAAA,MAAAA,CAAKwD,WAAWH,EAAAA,EAAAA,GAAKxF,EAAMkG,sBACrB,WACE,IAAQvC,EAAYjC,EAAUE,WAAtB+B,QAER,YAAgBzB,IAAZyB,EAEIxB,EAAAA,cAAAA,SAAAA,CACInB,GAAIU,EAAUlB,KACdA,KAAMkB,EAAUlB,KAChB2F,SAAU,SAAAC,GAAK,OACX7B,EAAuB,CACnB,OAAU,eACV,KAAQ7C,EAAUlB,KAClB,SAAY4F,EAAMC,OAAO7E,OAJlB,EAOf8E,OAAQ,kBACJ/B,EAAuB,CACnB,OAAU,aACV,KAAQ7C,EAAUlB,MAHlB,EAMRgB,MAAOA,GAENmC,EAAQA,QAAQM,KAAI,SAAAsC,GAAM,OACvBpE,EAAAA,cAAAA,SAAAA,CAAQC,IAAKmE,EAAQ/E,MAAO+E,GACvBA,EAFkB,KAUnCpE,EAAAA,cAAAA,QAAAA,CACIqE,KAAO,WACH,OAAQ9E,EAAUlB,MACd,IAAK,mBACL,IAAK,WACD,MAAO,WACX,QACI,MAAO,OAElB,CARM,GASPQ,GAAIU,EAAUlB,KACdA,KAAMkB,EAAUlB,KAChBgB,MAAOA,EACP2E,SAAU,SAAAC,GAAK,OACX7B,EAAuB,CACnB,OAAU,eACV,KAAQ7C,EAAUlB,KAClB,SAAY4F,EAAMC,OAAO7E,OAJlB,EAOf8E,OAAQ,kBACJ/B,EAAuB,CACnB,OAAU,aACV,KAAQ7C,EAAUlB,MAHlB,EAMRmF,WAAWH,EAAAA,EAAAA,GAAKxF,EAAMyG,cAAa,eACQ,IAA7BnB,EAAkB3C,OAChC+D,SAAUhF,EAAUiF,SACpBC,aAAclF,EAAUmF,cAGnC,CAjEC,GAkE4B,IAA7BvB,EAAkB3C,QACd,WACG,IAAMmE,EAAQ,eAAH,OAAkBpF,EAAUlB,MAEvC,OACI2B,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,QAAAA,KAAAA,IAAAA,OAAY2E,EAAZ,iCACA3E,EAAAA,cAAAA,OAAAA,CACInB,GAAI8F,EACJnB,WAAWH,EAAAA,EAAAA,GAAKxF,EAAM+G,0BACtBC,MAAO,CACH,SAAyC,IAA7B1B,EAAkB3C,OAAe,gBAAaT,GAC7D,YACS,UAEToD,EAAkBrB,KAAI,qBAAGgD,YAAH,KAItC,CAlBA,KAqBZlH,GAAcoC,EAAAA,cAACpC,EAAU,CAAC2B,UAAWA,IAGjD,IAGZ,C","sources":["../node_modules/keycloakify/src/lib/tools/emailRegExp.ts","../node_modules/keycloakify/src/lib/pages/shared/UserProfileCommons.tsx"],"sourcesContent":["export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import React, { useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../../KcProps\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { I18nBase } from \"../../i18n\";\nimport type { Attribute } from \"../../getKcContext\";\n\n// If you are copy pasting this code in your theme project\n// you can delete all the following import and replace them by\n// import {Â useFormValidation } from \"keycloakify/lib/pages/shared/UserProfileCommons\";\n// you can also delete the useFormValidation hooks and useGetErrors hooks, they shouldn't need\n// to be modified.\nimport \"../../tools/Array.prototype.every\";\nimport { useMemo, useReducer } from \"react\";\nimport type { KcContextBase, Validators } from \"../../getKcContext\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { emailRegexp } from \"../../tools/emailRegExp\";\nimport type { MessageKeyBase } from \"../../i18n\";\nimport { id } from \"tsafe/id\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18nBase;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", (props: { attribute: Attribute }) => JSX.Element | null>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport function UserProfileFormFields({\n    kcContext,\n    onIsFormSubmittableValueChange,\n    i18n,\n    BeforeField,\n    AfterField,\n    ...props\n}: UserProfileFormFieldsProps) {\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcContentWrapperClass)}>\n                                    <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={clsx(props.kcLabelWrapperClass)}>\n                                        <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={clsx(props.kcLabelWrapperClass)}>\n                                <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={clsx(props.kcInputWrapperClass)}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                {options.options.map(option => (\n                                                    <option key={option} value={option}>\n                                                        {option}\n                                                    </option>\n                                                ))}\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={clsx(props.kcInputClass)}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={clsx(props.kcInputErrorMessageClass)}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContextBase.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18nBase;\n}) {\n    const {\n        kcContext,\n        passwordValidators = {\n            \"length\": {\n                \"ignore.empty.value\": true,\n                \"min\": \"4\"\n            }\n        },\n        i18n\n    } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKeyBase}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKeyBase}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKeyBase}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContextBase.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18nBase;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if (defaultValue !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKeyBase>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKeyBase>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKeyBase>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKeyBase>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n"],"names":["emailRegexp","UserProfileFormFields","_a","kcContext","onIsFormSubmittableValueChange","i18n","BeforeField","AfterField","props","__rest","advancedMsg","params","passwordValidators","attributesWithPassword","useMemo","passwordRequired","name","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","id","getErrors","messagesPerField","msg","msgStr","advancedMsgStr","useConstCallback","fieldValueByAttributeName","value","find","attribute","defaultValue","validators","block","doesErrorExist","existsError","errorMessageStr","get","undefined","React","key","errors","validatorName","validator","ignoreEmptyValue","max","min","length","parseInt","msgArgs","push","Fragment","otherName","shouldBe","errorMessageKey","otherValue","msgArg","pattern","RegExp","test","reverse","intValue","isNaN","options","indexOf","useGetErrors","initialInternalState","Object","fromEntries","map","useReducer","state","action","newValue","formValidationInternalState","formValidationDispatch","formValidationState","entries","doDisplayPotentialErrorMessages","every","required","useFormValidation","fieldStateByAttributeName","isFormSubmittable","useEffect","currentGroup","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","clsx","kcFormGroupClass","kcFormGroupErrorClass","className","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","kcInputWrapperClass","onChange","event","target","onBlur","option","type","kcInputClass","disabled","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage"],"sourceRoot":""}